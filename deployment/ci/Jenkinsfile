pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SOURCE_TYPE',
            choices: ['github', 'local'],
            description: '选择代码来源：GitHub 仓库或本地 SCM'
        )
        string(
            name: 'GIT_BRANCH',
            defaultValue: 'main',
            description: 'Git 分支名称（仅当选择 GitHub 时有效）'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: '跳过测试阶段'
        )
        booleanParam(
            name: 'SKIP_SECURITY_SCAN',
            defaultValue: false,
            description: '跳过安全扫描'
        )
    }
    
    environment {
        DOCKER_REGISTRY = 'localhost:5000'
        IMAGE_NAME = 'sical-frontend'
        K8S_NAMESPACE = 'sical'
        GIT_REPO = 'https://github.com/kanewang179/sical.git'
        
        // Docker镜像版本
        NODE_IMAGE = 'node:18-alpine'
        KUBECTL_IMAGE = 'bitnami/kubectl:latest'
        TRIVY_IMAGE = 'aquasec/trivy:latest'
        
        // 国内镜像源配置
        NPM_REGISTRY = 'https://registry.npmmirror.com'
        DOCKER_BUILDKIT = '1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    if (params.SOURCE_TYPE == 'github') {
                        echo "从 GitHub 拉取代码: ${params.GIT_BRANCH} 分支"
                        // 清理工作空间
                        cleanWs()
                        
                        // 从 GitHub 拉取代码
                        git branch: "${params.GIT_BRANCH}", 
                            credentialsId: 'git-credentials',
                            url: "${GIT_REPO}"
                    } else {
                        echo "使用本地 SCM 代码"
                        checkout scm
                    }
                    
                    // 设置构建标签
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                    echo "构建版本: ${env.BUILD_TAG}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "使用 Docker 容器安装前端依赖..."
                    sh """
                        docker run --rm \
                            -v \${PWD}/frontend:/app \
                            -w /app \
                            ${NODE_IMAGE} \
                            sh -c '
                                echo "配置 npm 国内镜像源..."
                                npm config set registry ${NPM_REGISTRY}
                                echo "安装前端依赖..."
                                npm ci
                            '
                    """
                }
            }
        }
        
        stage('Run Tests') {
            when {
                not { params.SKIP_TESTS }
            }
            steps {
                script {
                    echo "使用 Docker 容器运行测试..."
                    sh """
                        docker run --rm \
                            -v \${PWD}/frontend:/app \
                            -w /app \
                            ${NODE_IMAGE} \
                            sh -c '
                                echo "运行测试..."
                                npm run test:run
                                npm run test:coverage
                            '
                    """
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'frontend/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Application') {
            when {
                expression { params.SOURCE_TYPE == 'local' }
            }
            steps {
                script {
                    echo "使用 Docker 容器构建应用..."
                    sh """
                        docker run --rm \
                            -v \${PWD}/frontend:/app \
                            -w /app \
                            ${NODE_IMAGE} \
                            sh -c '
                                echo "构建应用..."
                                npm run build
                            '
                    """
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "构建 Docker 镜像，标签: ${BUILD_TAG}"
                    
                    def dockerFile = params.SOURCE_TYPE == 'github' ? 'Dockerfile.multistage' : 'Dockerfile'
                    echo "使用 Dockerfile: ${dockerFile}"
                    
                    dir('frontend') {
                        sh """
                            # 构建镜像
                            docker build -f ${dockerFile} -t ${IMAGE_NAME}:${BUILD_TAG} .
                            docker tag ${IMAGE_NAME}:${BUILD_TAG} ${IMAGE_NAME}:latest
                            
                            # 推送到本地仓库
                            docker tag ${IMAGE_NAME}:${BUILD_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}
                            docker tag ${IMAGE_NAME}:${BUILD_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    }
                    
                    echo "镜像已推送: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}"
                }
            }
        }
        
        stage('Security Scan') {
            when {
                not { params.SKIP_SECURITY_SCAN }
            }
            steps {
                script {
                    echo "使用 Docker 容器运行安全扫描..."
                    sh """
                        docker run --rm \
                            -v /var/run/docker.sock:/var/run/docker.sock \
                            ${TRIVY_IMAGE} \
                            image ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "使用 Docker 容器部署到 Kubernetes..."
                    
                    // 准备 kubeconfig
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                        if (params.SOURCE_TYPE == 'github') {
                            sh """
                                docker run --rm \
                                    -v \${PWD}/deployment/k8s:/k8s \
                                    -v \${KUBECONFIG_FILE}:/root/.kube/config \
                                    ${KUBECTL_IMAGE} \
                                    sh -c '
                                        # 创建命名空间（如果不存在）
                                        kubectl apply -f /k8s/namespace.yaml
                                        
                                        # 应用ConfigMap（如果存在）
                                        if [ -f /k8s/configmap.yaml ]; then
                                            kubectl apply -f /k8s/configmap.yaml
                                        fi
                                        
                                        # 备份原始部署文件
                                        cp /k8s/frontend-deployment.yaml /k8s/frontend-deployment.yaml.bak
                                        
                                        # 更新部署镜像
                                        sed -i "s|image: sical-frontend:latest|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}|g" /k8s/frontend-deployment.yaml
                                        
                                        # 部署应用
                                        kubectl apply -f /k8s/frontend-deployment.yaml
                                        
                                        # 恢复原始文件
                                        mv /k8s/frontend-deployment.yaml.bak /k8s/frontend-deployment.yaml
                                    '
                            """
                        } else {
                            sh """
                                docker run --rm \
                                    -v \${PWD}/deployment/k8s:/k8s \
                                    -v \${KUBECONFIG_FILE}:/root/.kube/config \
                                    ${KUBECTL_IMAGE} \
                                    sh -c '
                                        # 创建命名空间（如果不存在）
                                        kubectl apply -f /k8s/namespace.yaml
                                        
                                        # 应用ConfigMap
                                        kubectl apply -f /k8s/configmap.yaml
                                        
                                        # 更新部署镜像
                                        sed -i "s|image: sical-frontend:latest|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}|g" /k8s/frontend-deployment.yaml
                                        
                                        # 部署应用
                                        kubectl apply -f /k8s/frontend-deployment.yaml
                                    '
                            """
                        }
                        
                        sh """
                            docker run --rm \
                                -v \${KUBECONFIG_FILE}:/root/.kube/config \
                                ${KUBECTL_IMAGE} \
                                sh -c '
                                    # 等待部署完成
                                    kubectl rollout status deployment/sical-frontend -n ${K8S_NAMESPACE} --timeout=300s
                                    
                                    # 验证部署
                                    kubectl get pods -n ${K8S_NAMESPACE} -l app=sical-frontend
                                '
                        """
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    echo "使用 Docker 容器执行健康检查..."
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                        sh """
                            # 等待服务就绪
                            sleep 30
                            
                            docker run --rm \
                                -v \${KUBECONFIG_FILE}:/root/.kube/config \
                                ${KUBECTL_IMAGE} \
                                sh -c '
                                    # 获取服务端点
                                    SERVICE_IP=\$(kubectl get svc sical-frontend-service -n ${K8S_NAMESPACE} -o jsonpath="{.spec.clusterIP}")
                                    echo "服务 IP: \$SERVICE_IP"
                                    
                                    # 健康检查
                                    kubectl run health-check-${BUILD_NUMBER} --rm -i --restart=Never --image=curlimages/curl -- \
                                    curl -f http://\$SERVICE_IP/ || exit 1
                                    
                                    echo "健康检查通过！"
                                '
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "流水线完成，清理中..."
            // 清理本地镜像
            sh """
                docker rmi ${IMAGE_NAME}:${BUILD_TAG} || true
                docker rmi ${IMAGE_NAME}:latest || true
            """
            // 清理工作空间
            cleanWs()
        }
        success {
            echo '流水线执行成功！'
            script {
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#deployments',
                        color: 'good',
                        message: "✅ 前端部署成功: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (${env.BUILD_TAG}) - 来源: ${params.SOURCE_TYPE} (<${env.BUILD_URL}|打开>)"
                    )
                }
            }
        }
        failure {
            echo '流水线执行失败！'
            script {
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#deployments',
                        color: 'danger',
                        message: "❌ 前端部署失败: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (${env.BUILD_TAG}) - 来源: ${params.SOURCE_TYPE} (<${env.BUILD_URL}|打开>)"
                    )
                }
            }
        }
        unstable {
            echo '流水线状态不稳定！'
            script {
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#deployments',
                        color: 'warning',
                        message: "⚠️ 前端部署不稳定: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (${env.BUILD_TAG}) - 来源: ${params.SOURCE_TYPE} (<${env.BUILD_URL}|打开>)"
                    )
                }
            }
        }
    }
}